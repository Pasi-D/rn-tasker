package com.todo_client;

import android.util.Log;

import com.couchbase.lite.BasicAuthenticator;
import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.DataSource;
import com.couchbase.lite.Document;
import com.couchbase.lite.Expression;
import com.couchbase.lite.MutableDocument;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryBuilder;
import com.couchbase.lite.Replicator;
import com.couchbase.lite.ReplicatorChange;
import com.couchbase.lite.ReplicatorChangeListener;
import com.couchbase.lite.ReplicatorConfiguration;
import com.couchbase.lite.ResultSet;
import com.couchbase.lite.SelectResult;
import com.facebook.react.ReactActivity;
import com.couchbase.lite.DatabaseConfiguration;
import com.couchbase.lite.Database;
import com.couchbase.lite.URLEndpoint;
import com.couchbase.lite.Endpoint;

import java.net.URI;
import java.net.URISyntaxException;

import static com.facebook.react.common.ReactConstants.TAG;

public class MainActivity extends ReactActivity {

    /**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */
    @Override
    protected String getMainComponentName() {
        return "todo_client";
    }

    @Override
    protected void onStart() {
        super.onStart();

        try {
            // Get the database (and create it if it doesnâ€™t exist).
            DatabaseConfiguration config = new DatabaseConfiguration(getApplicationContext());
            Database database = new Database("myDB", config);

            Log.d("onStart", "onStart: Getting the couchDatabase");

            // Create a new document (i.e. a record) in the database.
            MutableDocument mutableDoc = new MutableDocument()
                    .setFloat("version", 2.0F)
                    .setString("type", "SDK");

            // Save it to the database.
            database.save(mutableDoc);

            // Update a document.
            mutableDoc = database.getDocument(mutableDoc.getId()).toMutable();
            mutableDoc.setString("language", "Java");
            database.save(mutableDoc);

            Document document = database.getDocument(mutableDoc.getId());

            // Log the document ID (generated by the database) and properties
            Log.i("couchDBLite", "Document ID :: " + document.getId());
            Log.i("couchDBLite", "Learning " + document.getString("language"));

            // Create a query to fetch documents of type SDK.
            Query query = QueryBuilder.select(SelectResult.all())
                    .from(DataSource.database(database))
                    .where(Expression.property("type").equalTo(Expression.string("SDK")));
            ResultSet result = query.execute();
            Log.i("couchDBLite", "Number of rows ::  " + result.allResults().size());


            try{
                // Create replicators to push and pull changes to and from the cloud.
                Endpoint targetEndpoint = new URLEndpoint(new URI("ws://localhost:4984/example_sg_db"));
                ReplicatorConfiguration replConfig = new ReplicatorConfiguration(database, targetEndpoint);
                replConfig.setReplicatorType(ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL);

                // Add authentication.
                replConfig.setAuthenticator(new BasicAuthenticator("john", "pass"));

                // Create replicator.
                Replicator replicator = new Replicator(replConfig);

                // Listen to replicator change events.
                replicator.addChangeListener(new ReplicatorChangeListener() {
                    @Override
                    public void changed(ReplicatorChange change) {
                        if (change.getStatus().getError() != null)
                            Log.i("couchDBLite", "Error code ::  " + change.getStatus().getError().getCode());
                    }
                });


                // Start replication.
                replicator.start();

            }catch(URISyntaxException e){
                e.printStackTrace();
            }


        }catch (CouchbaseLiteException e){
            e.printStackTrace();
        }
    }
}
